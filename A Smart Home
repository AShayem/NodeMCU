#include <ThingerESP8266.h> 
#include <MQUnifiedsensor.h> 
#include "DHT.h" 

#define USERNAME "Aion_Zaman"
#define DEVICE_ID "NodeMcuProject302"
#define DEVICE_CREDENTIAL "EEE302"
#define SSID "ION"
#define SSID_PASSWORD "abcdefgh1234"

#define mq2 A0
#define flame D0
#define dhtsensor D9
#define pir D1
#define ldr D2
#define light D5
#define fan D6
#define automode D7

ThingerESP8266 thing(USERNAME, DEVICE_ID, DEVICE_CREDENTIAL);

DHT dht(dhtsensor, DHT11) ;

MQUnifiedsensor MQ2("ESP8266", 3.3, 10, A0, "MQ-2");
#define         RatioMQ2CleanAir        (9.83) //RS / R0 = 9.83 ppm 

int auto_mode = 0 ; //variable for indicating automatic mode state
int auto_temp = 25 ; //temperature threshold variable
float gas_threshold = 12 ; //gas threshold for MQ2 sensor

void setup() {
  //Pin Mode Declaration
  pinMode(light, OUTPUT);
  pinMode(fan, OUTPUT);
  pinMode(automode, OUTPUT);
  pinMode(flame, INPUT);
  pinMode(dhtsensor, INPUT);
  pinMode(pir, INPUT);
  pinMode(ldr,INPUT);
  pinMode(mq2, INPUT);
  //End of Pin Mode Declaration

  Serial.begin(9600); //Initialization Serial port 

  thing.add_wifi(SSID, SSID_PASSWORD);

  dht.begin(); //initalization of DHT sensor
 
  MQ2.init(); //initialization of MQ2 Sensor

  MQ2.setRegressionMethod(1);
  MQ2.setA(658.71); MQ2.setB(-2.168); // A and B value for detecting Propane

  //MQ2 Calibration Code
  float calcR0 = 0;
  for(int i = 1; i<=10; i ++)
  {
    MQ2.update(); 
    calcR0 += MQ2.calibrate(RatioMQ2CleanAir);
  }
  MQ2.setR0(calcR0/10);
  
  MQ2.serialDebug(true);

  
  thing["light1"] << digitalPin(D5); // Thing declaration for light

  thing["fan1"] << digitalPin(fan); // Thing declaration for fan
  
  thing["Auto"] << digitalPin(automode); //Thing declaration for automode

  //Section for the slider of Temperature threshold input
  thing["Temp Threshold"] << [](pson& in){
    if(in.is_empty())
    {
      in=auto_temp;
    }
    else
    {
      auto_temp = in ;
    }
  };

  //Section for fire detection and alert email
  thing["Fire"] >> [](pson& out){
    if (digitalRead(flame)==HIGH)
    {
      out = "Fire Not Detected" ;
    }
    else
    {
      out = "Fire Detected" ;
      thing.call_endpoint("Emergency_Email"); //call of email endpoint
    }
  };

  //Section for light sensitivity indetifier
  thing["LighSensitivity"] >> [](pson& out){
    if (digitalRead(ldr)==HIGH)
    {
      out = "Low Light" ;
    }
    else
    {
      out = "Enough Brightness" ;
    }
  };

  //Section for Temperature and Humidity read and display
  thing["temp"] >> [](pson& out){
      out["Temperature"] = dht.readTemperature();
      out["Humidity"] = dht.readHumidity();
  };

  //Section for gas level detection and corresponding email
  thing["Propane Level"] >> [](pson& out){
    MQ2.update();
    out["Propane"] = MQ2.readSensor();
    MQ2.update();
    if(MQ2.readSensor() >= gas_threshold) //comparison with threshold value
    {
      thing.call_endpoint("Emergency_Email2"); //call of email endpoint
    }
    MQ2.serialDebug();
  };

  //Section for gas level indicator whether it's serious or not
  thing["GasLevel"] >> [](pson& out){
    MQ2.update();
    if(MQ2.readSensor() >= gas_threshold)
    {
      out = "Propane Level High" ;
    }
    else
    {
      out = "Nothing Serious" ;
    }
    MQ2.serialDebug();
  };

  //Section for movement indication
  thing["MOvement"] >> [](pson& out){
    if (digitalRead(pir)==HIGH)
    {
      out = "Movement detected" ;
    }
    else
    {
      out = "Movemnent Undetected" ;
    }
  };
  
}

void loop()
{
  thing.handle(); 
  //Section for automatic mode
  if(digitalRead(automode)==HIGH)
  {
    //fan automatic section
    if(digitalRead(pir)==HIGH && (dht.readTemperature()>=auto_temp) )
    {
      digitalWrite(fan,HIGH);
    }
    else
    {
      digitalWrite(fan,LOW);
    }
    //End of fan automatic section
    
    //light automatic section
    if(digitalRead(pir)==HIGH && digitalRead(ldr)==HIGH )
    {
      digitalWrite(light,HIGH);
    }
    else
    {
      digitalWrite(light,LOW);
    }
    //End of light automatic section
  }
}
